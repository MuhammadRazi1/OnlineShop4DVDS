@*
    For more information on enabling MVC for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860
*@
<div class="anime__details__form">
    <div class="section-title">
        <h5>Your Review</h5>
    </div>
    <form asp-action="AddReview" asp-controller="User" method="post">
        <input type="hidden" name="AlbumId" value="@ViewBag.AlbumId" />
        <input type="hidden" name="GameId" value="@ViewBag.GameId" />
        <input type="hidden" name="MovieId" value="@ViewBag.MovieId" />
        <input type="hidden" name="UserId" value="@Context.Session.GetInt32("UserId")" />

        <textarea placeholder="Your Review" name="ReviewText" required></textarea>

        <div class="form-group">
            <label for="ReviewRating" style="display: block; margin-bottom: 10px; color: white">Rating</label>
            <div class="star-rating">
                @for (int i = 1; i <= 5; i++)
                {
                    <span class="star" data-value="@i">&#9733;</span>
                }
            </div>
            <input type="hidden" name="ReviewRating" id="ReviewRating" required />
        </div>

        <button type="submit"><i class="fa fa-location-arrow"></i> Submit Review</button>
    </form>
</div>

<style>
    .star-rating {
        font-size: 24px;
        cursor: pointer;
        margin-bottom: 10px;
    }

        .star-rating .star {
            color: #ccc; /* Default color for inactive stars */
        }

            .star-rating .star.active {
                color: #ffcc00; /* Color for active stars */
            }
</style>

<script>
      document.addEventListener('DOMContentLoaded', function () {
        // Select only the stars within the review form
        const reviewForm = document.querySelector('.anime__details__form');
        const stars = reviewForm.querySelectorAll('.star-rating .star');
        const ratingInput = reviewForm.querySelector('#ReviewRating');

        stars.forEach(star => {
            star.addEventListener('click', function () {
                const value = this.getAttribute('data-value');
                ratingInput.value = value;

                // Highlight stars up to the clicked star
                stars.forEach((s, index) => {
                    if (index < value) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
            });

            star.addEventListener('mouseover', function () {
                const value = this.getAttribute('data-value');

                // Highlight stars up to the hovered star
                stars.forEach((s, index) => {
                    if (index < value) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
            });

            star.addEventListener('mouseout', function () {
                // Reset stars to their original state (based on the selected rating)
                const selectedValue = ratingInput.value || 0;
                stars.forEach((s, index) => {
                    if (index < selectedValue) {
                        s.classList.add('active');
                    } else {
                        s.classList.remove('active');
                    }
                });
            });
        });
    });
</script>